AWSTemplateFormatVersion: "2010-09-09"
Description: "(SO0042) - aws-content-analysis. Elasticsearch Consumer stack"

Parameters:
  DeployElasticsearch:
    Type: String
    Description: "Would you like to deploy an Elasticsearch cluster?"
    Default: Yes
    AllowedValues:
      - Yes
      - No
  #  ESEndpoint:
  #    Type: String
  #    Description: "Enter your existing elastic endpoint if you choose not to have a cluster deployed for you"
  NodeType:
    Description: "The node type to be provisioned for the Elasticsearch cluster"
    Type: String
    Default: "t3.small.elasticsearch"
    AllowedValues:
      - "t3.small.elasticsearch"
      - "m4.large.elasticsearch"
      - "m4.xlarge.elasticsearch"
      - "c4.large.elasticsearch"
      - "c4.xlarge.elasticsearch"
      - "r4.large.elasticsearch"
      - "r4.xlarge.elasticsearch"
    ConstraintDescription: "must be a valid Elasticsearch node type."
  NodeCount:
    Description: "The number of nodes in the Elasticsearch cluster."
    Type: Number
    Default: 2
  MieDataplaneBucket:
    Type: String
    Description: "Name of the dataplane bucket"
  ESConsumerCode:
    Type: String
    Default: "esconsumer.zip"
    Description: "S3 Key of the elasticsearch consumer code"
  AnalyticsStreamArn:
    Description: "Arn of the MIE kinesis data stream"
    Type: String

Conditions:
  DeployESCluster: !Equals [!Ref DeployElasticsearch, Yes]

Mappings:
  SourceCode:
    General:
      RegionalS3Bucket: '%%REGIONAL_BUCKET_NAME%%'
      KeyPrefix: "aws-content-analysis/%%VERSION%%"

Resources:
  # elastic search cluster

  # TODO: Best Practice - Resource found with an explicit name, this disallows updates that require replacement of this resource

  ESDomain:
    Type: "AWS::Elasticsearch::Domain"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W90
            reason: "This resource does not need to access any other resource provisioned within a VPC."
    Properties:
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount:
          !Ref NodeCount
        ZoneAwarenessEnabled: false
        InstanceType:
          !Ref NodeType
      ElasticsearchVersion: 7.10
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0

  # elastic search consumer lambda

  ElasticsearchConsumerLambda:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
            reason: "This resource does not need to access any other resource provisioned within a VPC."
          - id: W89
            reason: "This resource does not need to access any other resource provisioned within a VPC."

    Properties:
      Handler: "lambda_handler.lambda_handler"
      Role: !GetAtt ElasticConsumerRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "RegionalS3Bucket"], Ref: "AWS::Region"]]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "KeyPrefix"],
              "esconsumer.zip",
            ],
          ]
      Runtime: "python3.7"
      Timeout: 900
      MemorySize: 2048
      ReservedConcurrentExecutions: 0
      Environment:
        Variables:
          EsEndpoint: !GetAtt ESDomain.DomainEndpoint
          DataplaneBucket: !Ref MieDataplaneBucket

  # stream event mapping for lambda

  StreamingFunctionEventMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      Enabled: true
      EventSourceArn: !Ref AnalyticsStreamArn
      FunctionName: !GetAtt ElasticsearchConsumerLambda.Arn
      StartingPosition: "LATEST"

  # IAM

  # TODO: Need to clean up this policy with regards to elasticsearch access
  ElasticConsumerRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Lambda requires ability to write to cloudwatch *, as configured in the default AWS lambda execution role."
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ElasticKinesisAccessPolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetShardIterator"
                  - "kinesis:GetRecords"
                Resource: !Ref AnalyticsStreamArn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Join ["",["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:*"]]
              - Effect: Allow
                Action:
                  - "es:ESHttpPost"
                  - "es:ESHttpPut"
                  - "es:ESHttpDelete"
                  - "es:ESHttpGet"
                Resource: !Join ["", [!GetAtt ESDomain.DomainArn, "/*"]]
              - Effect: Allow
                Action:
                  - "es:DescribeElasticsearchDomain"
                  - "es:GetCompatibleElasticsearchVersions"
                  - "es:DescribeElasticsearchDomains"
                Resource: !GetAtt ESDomain.DomainArn
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${MieDataplaneBucket}/*"
Outputs:
  ElasticEndpoint:
    Value: !GetAtt ESDomain.DomainEndpoint
  DomainArn:
    Value: !GetAtt ESDomain.DomainArn
